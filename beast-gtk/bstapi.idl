// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html -*-mode:c++;-*-
/**
 * @file
 * @brief Generated BEAST structures.
 */

namespace Bst {

// == Enums ==
enum Direction {
  DIR_UP    = Enum (_("Up"), _("Move upwards")),
  DIR_LEFT  = Enum (_("Left"), _("Move to the left")),
  DIR_RIGHT = Enum (_("Right"), _("Move to the right")),
  DIR_DOWN  = Enum (_("Down"), _("Move downwards"))
};

enum FFTSize {
  FFT_SIZE_2     = Enum (    2, _("2 Value FFT Window"), _("A 2 value FFT window corresponds to a spectrum with 2 frequency peaks")),
  FFT_SIZE_4     = Enum (    4, _("4 Value FFT Window"), _("A 4 value FFT window corresponds to a spectrum with 3 frequency peaks")),
  FFT_SIZE_8     = Enum (    8, _("8 Value FFT Window"), _("A 8 value FFT window corresponds to a spectrum with 5 frequency peaks")),
  FFT_SIZE_16    = Enum (   16, _("16 Value FFT Window"), _("A 16 value FFT window corresponds to a spectrum with 9 frequency peaks")),
  FFT_SIZE_32    = Enum (   32, _("32 Value FFT Window"), _("A 32 value FFT window corresponds to a spectrum with 17 frequency peaks")),
  FFT_SIZE_64    = Enum (   64, _("64 Value FFT Window"), _("A 64 value FFT window corresponds to a spectrum with 33 frequency peaks")),
  FFT_SIZE_128   = Enum (  128, _("128 Value FFT Window"), _("A 128 value FFT window corresponds to a spectrum with 65 frequency peaks")),
  FFT_SIZE_256   = Enum (  256, _("256 Value FFT Window"), _("A 256 value FFT window corresponds to a spectrum with 129 frequency peaks")),
  FFT_SIZE_512   = Enum (  512, _("512 Value FFT Window"), _("A 512 value FFT window corresponds to a spectrum with 257 frequency peaks")),
  FFT_SIZE_1024  = Enum ( 1024, _("1024 Value FFT Window"), _("A 1024 value FFT window corresponds to a spectrum with 513 frequency peaks")),
  FFT_SIZE_2048  = Enum ( 2048, _("2048 Value FFT Window"), _("A 2048 value FFT window corresponds to a spectrum with 1025 frequency peaks")),
  FFT_SIZE_4096  = Enum ( 4096, _("4096 Value FFT Window"), _("A 4096 value FFT window corresponds to a spectrum with 2049 frequency peaks")),
  FFT_SIZE_8192  = Enum ( 8192, _("8192 Value FFT Window"), _("A 8192 value FFT window corresponds to a spectrum with 4097 frequency peaks")),
  FFT_SIZE_16384 = Enum (16384, _("16384 Value FFT Window"), _("A 16384 value FFT window corresponds to a spectrum with 8193 frequency peaks")),
  FFT_SIZE_32768 = Enum (32768, _("32768 Value FFT Window"), _("A 32768 value FFT window corresponds to a spectrum with 16385 frequency peaks")),
  FFT_SIZE_65536 = Enum (65536, _("65536 Value FFT Window"), _("A 65536 value FFT window corresponds to a spectrum with 32769 frequency peaks")),
};

enum NoteLength {
  NOTE_LENGTH_NONE      = Enum (0,	    _("None"), _("Unspecified length")),
  NOTE_LENGTH_1         = Enum (_("1/1"),
                                /* TRANSLATORS: note is a noun */
                                _("Whole note")),
  NOTE_LENGTH_2         = Enum (_("1/2"),   _("Half note")),
  NOTE_LENGTH_4         = Enum (_("1/4"),   _("Quarter note")),
  NOTE_LENGTH_8         = Enum (_("1/8"),   _("Eighths note")),
  NOTE_LENGTH_16        = Enum (_("1/16"),  _("Sixteenth note")),
  NOTE_LENGTH_32        = Enum (_("1/32"),  _("Thirty-secondth note")),
  NOTE_LENGTH_64        = Enum (_("1/64"),  _("Sixty-fourth note")),
  NOTE_LENGTH_128       = Enum (_("1/128"), _("Hundred twenty-eighth note")),
  NOTE_LENGTH_1P        = Enum (_("1/1."),  _("Dotted whole note")),
  NOTE_LENGTH_2P        = Enum (_("1/2."),  _("Dotted half note")),
  NOTE_LENGTH_4P        = Enum (_("1/4."),  _("Dotted quarter note")),
  NOTE_LENGTH_8P        = Enum (_("1/8."),  _("Dotted eighths note")),
  NOTE_LENGTH_16P       = Enum (_("1/16."), _("Dotted sixteenth note")),
  NOTE_LENGTH_32P       = Enum (_("1/32."), _("Dotted thirty-secondth note")),
  NOTE_LENGTH_64P       = Enum (_("1/64."), _("Dotted sixty-fourth note")),
  NOTE_LENGTH_128P      = Enum (_("1/128."),_("Dotted hundred twenty-eighth note")),
  NOTE_LENGTH_1T        = Enum (_("1/1T"),  _("Triplet whole note")),
  NOTE_LENGTH_2T        = Enum (_("1/2T"),  _("Triplet half note")),
  NOTE_LENGTH_4T        = Enum (_("1/4T"),  _("Triplet quarter note")),
  NOTE_LENGTH_8T        = Enum (_("1/8T"),  _("Triplet eighths note")),
  NOTE_LENGTH_16T       = Enum (_("1/16T"), _("Triplet sixteenth note")),
  NOTE_LENGTH_32T       = Enum (_("1/32T"), _("Triplet thirty-secondth note")),
  NOTE_LENGTH_64T       = Enum (_("1/64T"), _("Triplet sixty-fourth note")),
  NOTE_LENGTH_128T      = Enum (_("1/128T"),_("Triplet hundred twenty-eighth note")),
};

enum QSamplerDrawMode {
  CRANGE          = Enum (_("Shape Range")),
  ZERO_SHAPE      = Enum (_("Shape Average")),
  MINIMUM_SHAPE   = Enum (_("Shape Minimum")),
  MAXIMUM_SHAPE   = Enum (_("Shape Maximum")),
  CSHAPE          = Enum (_("Sketch Range")),
  MIDDLE_LINE     = Enum (_("Sketch Average")),
  MINIMUM_LINE    = Enum (_("Sketch Minimum")),
  MAXIMUM_LINE    = Enum (_("Sketch Maximum")),
};

enum RowShading {
  ROW_SHADING_NONE    = Enum (0,       	     _("None")),
  ROW_SHADING_2       = Enum (_("2"),        _("Every second row")),
  ROW_SHADING_4       = Enum (_("4"),        _("Every fourth row")),
  ROW_SHADING_8       = Enum (_("8"),        _("Every eighth row")),
  ROW_SHADING_16      = Enum (_("16"),       _("Every sixteenth row")),
  ROW_SHADING_2_4     = Enum (_("2 & 4"),    _("Every second and fourth row")),
  ROW_SHADING_4_8     = Enum (_("4 & 8"),    _("Every fourth and eighth row")),
  ROW_SHADING_4_12    = Enum (_("4 & 12"),   _("Every fourth and twelfth row")),
  ROW_SHADING_4_16    = Enum (_("4 & 16"),   _("Every fourth and sixteenth row")),
  ROW_SHADING_8_16    = Enum (_("8 & 16"),   _("Every eighth and sixteenth row")),
  ROW_SHADING_3       = Enum (_("3"),        _("Every third row")),
  ROW_SHADING_6       = Enum (_("6"),        _("Every sixth row")),
  ROW_SHADING_12      = Enum (_("12"),       _("Every twelfth row")),
  ROW_SHADING_3_6     = Enum (_("3 & 6"),    _("Every third and sixth row")),
  ROW_SHADING_3_12    = Enum (_("3 & 12"),   _("Every third and twelfth row")),
  ROW_SHADING_6_12    = Enum (_("6 & 12"),   _("Every sixth and twelfth row")),
};


// == Constants ==
Const STORAGE = ":r:w:S:";
Const STANDARD = STORAGE "G:";
Const STDSCALE = STANDARD ":scale";
Const STDHEXCOLOR = STANDARD ":rgb:hex";
Const STDIMAGEFILE = STANDARD ":filename:image";


// == Global Config ==
record GConfig {
  /* TRANSLATORS: the release counter corresponds to the beast version and is stored in the config file
   * to be able to load old versions of the config file
   */
  String rc_version		= String ("RC-Version", _("Release counter"), STORAGE);
  group "Synthesis Networks" {
    int32 snet_font_size        = Range (_("Font Size"), _("Font size in pixels for labels displayed in synthesis networks"),
                                         STANDARD, 1, 48, 2, 10);
    bool  snet_anti_aliased	= Bool (_("Anti-Alias"), _("Draw synthesis networks anti-aliased?"), STANDARD, TRUE);
    bool  snet_edit_fallback	= Bool (_("Single Edit"), _("Fallback into Edit mode after creating synthesis modules?"),
                                        STANDARD, TRUE);
    bool  snet_swap_io_channels	= Bool (_("Swap IO"), _("Swap input with output channels when displaying synthesis modules?"),
                                        STANDARD, FALSE);
  };
  group "Misc" {
    bool  gui_enable_error_bell   = Bool (_("Enable Error Bell"), _("Notify users via error bells if edits cannot be carried out"),
                                          STANDARD, TRUE);
    bool  size_group_input_fields = Bool (_("Homogeneous Input Fields"),
                                          _("Enable homogeneous sizes for most (numeric and text) input fields. "
                                            "For some fields, this will only take effect after a restart."),
                                          STANDARD, TRUE);
    bool  slow_scopes             = Bool (_("Slow scopes"),
                                          _("Slow down the periodic update frequency of scopes aggresively. "
                                            "Doing this may be desirable on particularly slow machines."),
                                          STANDARD, FALSE);
  };
};


// == SkinConfig ==
record SkinConfig {
  String    skin_name   = String (_("Skin Name"), _("Name for the current skin configuration (used for skin selections)."), STANDARD);
  group "Pattern Editor" {
    String  pattern_image   = String (_("Background Image"), _("Background image used by the pattern editor."), STDIMAGEFILE);
    float64 pattern_shade   = Range (_("Image shade"), _("Percentage of background image pixel to blend over background color."), STDSCALE, 0, 100, 5, 2.5);
    int32   pattern_color   = Range (_("Background Color"),      "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xf5f3ed);
    int32   pattern_scolor1 = Range (_("Background Shade 1"),    "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xd3d1cb);
    int32   pattern_scolor2 = Range (_("Background Shade 2"),    "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xe0ded8);
    int32   pattern_text0   = Range (_("Empty Field Color"),     "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x303030);
    int32   pattern_text1   = Range (_("Text Color"),            "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x000000);
    int32   pattern_vbar1   = Range (_("Vertical Bar Color"),    "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x7f7f7f);
  };
  group "Piano Roll" {
    String  piano_image = String (_("Background Image"), _("Background image used by the piano-roll editor."), STDIMAGEFILE);
    float64 piano_shade = Range (_("Image shade"), _("Percentage of background image pixel to blend over background color."), STDSCALE, 0, 100, 5, 2.5);
    int32   piano_color = Range (_("Background Color"),      "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xf5f3ed);
    int32   piano_hbar  = Range (_("Horizontal Bar Color"),  "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x7f7f7f);
    int32   piano_vbar  = Range (_("Vertical Bar Color"),    "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x7f7f7f);
    int32   piano_hgrid = Range (_("Horizontal Grid Color"), "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xbfbfbf);
    int32   piano_vgrid = Range (_("Vertical Grid Color"),   "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xbfbfbf);
    int32   piano_mbar  = Range (_("Middle Bar Color"),      "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xa0a0a0);
  };
  group "Control Events" {
    String  controls_image    = String (_("Background Image"), _("Background image used by the control events editor."), STDIMAGEFILE);
    float64 controls_shade    = Range (_("Image shade"), _("Percentage of background image pixel to blend over background color."), STDSCALE, 0, 100, 5, 2.5);
    int32   controls_color    = Range (_("Background Color"),      "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xf5f3ed);
    int32   controls_hbar     = Range (_("Horizontal Bar Color"),  "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x7f7f7f);
    int32   controls_mbar     = Range (_("Middle Bar Color"),      "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xa0a0a0);
    int32   controls_positive = Range (_("Positive Value Color"),  "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x0000ff);
    int32   controls_zero     = Range (_("Zero Value Color"),      "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0xff0000);
    int32   controls_negative = Range (_("Negative Value Color"),  "", STDHEXCOLOR, 0, 0xffffff, 0x010101, 0x0000ff);
  };
};


// == MsgAbsorb Filter ==
record MsgAbsorbString {
  String version;
  String cstring;
  bool   enabled;
};
sequence MsgAbsorbStringSeq {
  MsgAbsorbString strings;
};


// == Key Bindings ==
record KeyBindingItem {
  String  key_name   = String ("", "", STANDARD);
  String  func_name  = String ("", "", STANDARD);
  float64 func_param = Range  ("", "", STANDARD ":scale", -1e37, +1e37, 100);
};
sequence KeyBindingItemSeq {
  KeyBindingItem items;
};


} // Bst
