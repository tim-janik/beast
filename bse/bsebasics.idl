// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
namespace Bse {
using namespace Sfi;
/* param options */
Const READWRITE       = ":r:w:";
Const STORAGE         = ":r:w:S:";
Const STANDARD        = ":r:w:S:G:";
Const STANDARD_RDONLY = ":r:w:S:G:ro:";
Const GUI             = ":r:w:G:";
Const GUI_RDONLY      = ":r:w:G:ro:";
Const GUI_READABLE    = ":r:G:";
/* extra options */
Const SKIP_DEFAULT    = ":skip-default:";
Const SKIP_UNDO       = ":skip-undo:";
Const DEFAULT = STANDARD; // FIXME: remove
/* numeric constants */
Const MAXINT = +2147483647;
Const MININT = -2147483648;
Const MAXNUM = +9223372036854775807;
Const MINNUM = -9223372036854775808;
Const MINDB = -96; /* 32bit:-192 24bit:-144 16bit:-96 */
/* standard sequences */
sequence TypeSeq {
  SfiString types;
};
sequence Flo4tSeq {
  Real values;
};
enum MidiControlType {
  /* special cased signals */
  MIDI_CONTROL_NONE                            = Enum (0, _("None")),
  /* 14bit, continuous controls */
  MIDI_CONTROL_CONTINUOUS_0                    = Enum (64,  _("Bank Select"), _("Continuous MIDI Control #1 - Bank Select")),
  MIDI_CONTROL_CONTINUOUS_1                    = Enum (65,  _("Modulation Depth")),
  MIDI_CONTROL_CONTINUOUS_2                    = Enum (66,  _("Breath Control")),
  MIDI_CONTROL_CONTINUOUS_3                    = Enum (67,  _("Continuous 3")),
  MIDI_CONTROL_CONTINUOUS_4                    = Enum (68,  _("Foot Controller")),
  MIDI_CONTROL_CONTINUOUS_5                    = Enum (69,  _("Portamento Time")),
  MIDI_CONTROL_CONTINUOUS_6                    = Enum (70,  _("Data Entry")),
  MIDI_CONTROL_CONTINUOUS_7                    = Enum (71,  _("Volume")),
  MIDI_CONTROL_CONTINUOUS_8                    = Enum (72,  _("Balance")),
  MIDI_CONTROL_CONTINUOUS_9                    = Enum (73,  _("Continuous 9")),
  MIDI_CONTROL_CONTINUOUS_10                   = Enum (74,  _("Panorama")),
  MIDI_CONTROL_CONTINUOUS_11                   = Enum (75,  _("Expression")),
  MIDI_CONTROL_CONTINUOUS_12                   = Enum (76,  _("Effect Control 1")),
  MIDI_CONTROL_CONTINUOUS_13                   = Enum (77,  _("Effect Control 2")),
  MIDI_CONTROL_CONTINUOUS_14                   = Enum (78,  _("Continuous 14")),
  MIDI_CONTROL_CONTINUOUS_15                   = Enum (79,  _("Continuous 15")),
  MIDI_CONTROL_CONTINUOUS_16                   = Enum (80,  _("General Purpose Controller 1")),
  MIDI_CONTROL_CONTINUOUS_17                   = Enum (81,  _("General Purpose Controller 2")),
  MIDI_CONTROL_CONTINUOUS_18                   = Enum (82,  _("General Purpose Controller 3")),
  MIDI_CONTROL_CONTINUOUS_19                   = Enum (83,  _("General Purpose Controller 4")),
  MIDI_CONTROL_CONTINUOUS_20                   = Enum (84,  _("Continuous 20")),
  MIDI_CONTROL_CONTINUOUS_21                   = Enum (85,  _("Continuous 21")),
  MIDI_CONTROL_CONTINUOUS_22                   = Enum (86,  _("Continuous 22")),
  MIDI_CONTROL_CONTINUOUS_23                   = Enum (87,  _("Continuous 23")),
  MIDI_CONTROL_CONTINUOUS_24                   = Enum (88,  _("Continuous 24")),
  MIDI_CONTROL_CONTINUOUS_25                   = Enum (89,  _("Continuous 25")),
  MIDI_CONTROL_CONTINUOUS_26                   = Enum (90,  _("Continuous 26")),
  MIDI_CONTROL_CONTINUOUS_27                   = Enum (91,  _("Continuous 27")),
  MIDI_CONTROL_CONTINUOUS_28                   = Enum (92,  _("Continuous 28")),
  MIDI_CONTROL_CONTINUOUS_29                   = Enum (93,  _("Continuous 29")),
  MIDI_CONTROL_CONTINUOUS_30                   = Enum (94,  _("Continuous 30")),
  MIDI_CONTROL_CONTINUOUS_31                   = Enum (95,  _("Continuous 31")),
  /* 7bit, literal channel controls, MSB values */
  MIDI_CONTROL_0                               = Enum (128, _("Control 0 Bank Select MSB")),
  MIDI_CONTROL_1                               = Enum (129, _("Control 1 Modulation Depth MSB")),
  MIDI_CONTROL_2                               = Enum (130, _("Control 2 Breath Control MSB")),
  MIDI_CONTROL_3                               = Enum (131, _("control-3")),
  MIDI_CONTROL_4                               = Enum (132, _("Control 4 Foot Controller MSB")),
  MIDI_CONTROL_5                               = Enum (133, _("Control 5 Portamento Time MSB")),
  MIDI_CONTROL_6                               = Enum (134, _("Control 6 Data Entry MSB")),
  MIDI_CONTROL_7                               = Enum (135, _("Control 7 Volume MSB")),
  MIDI_CONTROL_8                               = Enum (136, _("Control 8 Balance MSB")),
  MIDI_CONTROL_9                               = Enum (137, _("control-9")),
  MIDI_CONTROL_10                              = Enum (138, _("Control 10 Panorama MSB")),
  MIDI_CONTROL_11                              = Enum (139, _("Control 11 Expression MSB")),
  MIDI_CONTROL_12                              = Enum (140, _("Control 12 Effect Control 1 MSB")),
  MIDI_CONTROL_13                              = Enum (141, _("Control 13 Effect Control 2 MSB")),
  MIDI_CONTROL_14                              = Enum (142, _("control-14")),
  MIDI_CONTROL_15                              = Enum (143, _("control-15")),
  MIDI_CONTROL_16                              = Enum (144, _("Control 16 General Purpose Controller 1 MSB")),
  MIDI_CONTROL_17                              = Enum (145, _("Control 17 General Purpose Controller 2 MSB")),
  MIDI_CONTROL_18                              = Enum (146, _("Control 18 General Purpose Controller 3 MSB")),
  MIDI_CONTROL_19                              = Enum (147, _("Control 19 General Purpose Controller 4 MSB")),
  MIDI_CONTROL_20                              = Enum (148, _("control-20")),
  MIDI_CONTROL_21                              = Enum (149, _("control-21")),
  MIDI_CONTROL_22                              = Enum (150, _("control-22")),
  MIDI_CONTROL_23                              = Enum (151, _("control-23")),
  MIDI_CONTROL_24                              = Enum (152, _("control-24")),
  MIDI_CONTROL_25                              = Enum (153, _("control-25")),
  MIDI_CONTROL_26                              = Enum (154, _("control-26")),
  MIDI_CONTROL_27                              = Enum (155, _("control-27")),
  MIDI_CONTROL_28                              = Enum (156, _("control-28")),
  MIDI_CONTROL_29                              = Enum (157, _("control-29")),
  MIDI_CONTROL_30                              = Enum (158, _("control-30")),
  MIDI_CONTROL_31                              = Enum (159, _("control-31")),
  /* 7bit, literal channel controls, LSB values */
  MIDI_CONTROL_32                              = Enum (160, _("Control 32 Bank Select LSB")),
  MIDI_CONTROL_33                              = Enum (161, _("Control 33 Modulation Depth LSB")),
  MIDI_CONTROL_34                              = Enum (162, _("Control 34 Breath Control LSB")),
  MIDI_CONTROL_35                              = Enum (163, _("control-35")),
  MIDI_CONTROL_36                              = Enum (164, _("Control 36 Foot Controller LSB")),
  MIDI_CONTROL_37                              = Enum (165, _("Control 37 Portamento Time LSB")),
  MIDI_CONTROL_38                              = Enum (166, _("Control 38 Data Entry LSB")),
  MIDI_CONTROL_39                              = Enum (167, _("Control 39 Volume LSB")),
  MIDI_CONTROL_40                              = Enum (168, _("Control 40 Balance LSB")),
  MIDI_CONTROL_41                              = Enum (169, _("control-41")),
  MIDI_CONTROL_42                              = Enum (170, _("Control 42 Panorama LSB")),
  MIDI_CONTROL_43                              = Enum (171, _("Control 43 Expression LSB")),
  MIDI_CONTROL_44                              = Enum (172, _("Control 44 Effect Control 1 LSB")),
  MIDI_CONTROL_45                              = Enum (173, _("Control 45 Effect Control 2 LSB")),
  MIDI_CONTROL_46                              = Enum (174, _("control-46")),
  MIDI_CONTROL_47                              = Enum (175, _("control-47")),
  MIDI_CONTROL_48                              = Enum (176, _("Control 48 General Purpose Controller 1 LSB")),
  MIDI_CONTROL_49                              = Enum (177, _("Control 49 General Purpose Controller 2 LSB")),
  MIDI_CONTROL_50                              = Enum (178, _("Control 50 General Purpose Controller 3 LSB")),
  MIDI_CONTROL_51                              = Enum (179, _("Control 51 General Purpose Controller 4 LSB")),
  MIDI_CONTROL_52                              = Enum (180, _("control-52")),
  MIDI_CONTROL_53                              = Enum (181, _("control-53")),
  MIDI_CONTROL_54                              = Enum (182, _("control-54")),
  MIDI_CONTROL_55                              = Enum (183, _("control-55")),
  MIDI_CONTROL_56                              = Enum (184, _("control-56")),
  MIDI_CONTROL_57                              = Enum (185, _("control-57")),
  MIDI_CONTROL_58                              = Enum (186, _("control-58")),
  MIDI_CONTROL_59                              = Enum (187, _("control-59")),
  MIDI_CONTROL_60                              = Enum (188, _("control-60")),
  MIDI_CONTROL_61                              = Enum (189, _("control-61")),
  MIDI_CONTROL_62                              = Enum (190, _("control-62")),
  MIDI_CONTROL_63                              = Enum (191, _("control-63")),
  /* 7bit, literal channel controls */
  MIDI_CONTROL_64                              = Enum (192, _("Control 64 Damper Pedal Switch (Sustain)")),
  MIDI_CONTROL_65                              = Enum (193, _("Control 65 Portamento Switch")),
  MIDI_CONTROL_66                              = Enum (194, _("Control 66 Sustenuto Switch")),
  MIDI_CONTROL_67                              = Enum (195, _("Control 67 Soft Switch")),
  MIDI_CONTROL_68                              = Enum (196, _("Control 68 Legato Pedal Switch")),
  MIDI_CONTROL_69                              = Enum (197, _("Control 69 Hold Pedal Switch")),
  MIDI_CONTROL_70                              = Enum (198, _("Control 70 Sound Variation")),
  MIDI_CONTROL_71                              = Enum (199, _("Control 71 Filter Resonance (Timbre)")),
  MIDI_CONTROL_72                              = Enum (200, _("Control 72 Sound Release Time")),
  MIDI_CONTROL_73                              = Enum (201, _("Control 73 Sound Attack Time")),
  MIDI_CONTROL_74                              = Enum (202, _("Control 74 Sound Brightness")),
  MIDI_CONTROL_75                              = Enum (203, _("Control 75 Sound Decay Time")),
  MIDI_CONTROL_76                              = Enum (204, _("Control 76 Vibrato Rate")),
  MIDI_CONTROL_77                              = Enum (205, _("Control 77 Vibrato Depth")),
  MIDI_CONTROL_78                              = Enum (206, _("Control 78 Vibrato Delay")),
  MIDI_CONTROL_79                              = Enum (207, _("Control 79 Sound Control 10")),
  MIDI_CONTROL_80                              = Enum (208, _("Control 80 General Purpose Switch 5")),
  MIDI_CONTROL_81                              = Enum (209, _("Control 81 General Purpose Switch 6")),
  MIDI_CONTROL_82                              = Enum (210, _("Control 82 General Purpose Switch 7")),
  MIDI_CONTROL_83                              = Enum (211, _("Control 83 General Purpose Switch 8")),
  MIDI_CONTROL_84                              = Enum (212, _("Control 84 Portamento Control (Note)")),
  MIDI_CONTROL_85                              = Enum (213, _("control-85")),
  MIDI_CONTROL_86                              = Enum (214, _("control-86")),
  MIDI_CONTROL_87                              = Enum (215, _("control-87")),
  MIDI_CONTROL_88                              = Enum (216, _("control-88")),
  MIDI_CONTROL_89                              = Enum (217, _("control-89")),
  MIDI_CONTROL_90                              = Enum (218, _("control-90")),
  MIDI_CONTROL_91                              = Enum (219, _("Control 91 Reverb Depth")),
  MIDI_CONTROL_92                              = Enum (220, _("Control 92 Tremolo Depth")),
  MIDI_CONTROL_93                              = Enum (221, _("Control 93 Chorus Depth")),
  MIDI_CONTROL_94                              = Enum (222, _("Control 93 Detune Depth")),
  MIDI_CONTROL_95                              = Enum (223, _("Control 95 Phase Depth")),
  MIDI_CONTROL_96                              = Enum (224, _("Control 96 Data Increment Trigger")),
  MIDI_CONTROL_97                              = Enum (225, _("Control 97 Data Decrement Trigger")),
  MIDI_CONTROL_98                              = Enum (226, _("Control 98 Non-Registered Parameter MSB")),
  MIDI_CONTROL_99                              = Enum (227, _("Control 99 Non-Registered Parameter LSB")),
  MIDI_CONTROL_100                             = Enum (228, _("Control 100 Registered Parameter MSB")),
  MIDI_CONTROL_101                             = Enum (229, _("Control 101 Registered Parameter LSB")),
  MIDI_CONTROL_102                             = Enum (230, _("control-102")),
  MIDI_CONTROL_103                             = Enum (231, _("control-103")),
  MIDI_CONTROL_104                             = Enum (232, _("control-104")),
  MIDI_CONTROL_105                             = Enum (233, _("control-105")),
  MIDI_CONTROL_106                             = Enum (234, _("control-106")),
  MIDI_CONTROL_107                             = Enum (235, _("control-107")),
  MIDI_CONTROL_108                             = Enum (236, _("control-108")),
  MIDI_CONTROL_109                             = Enum (237, _("control-109")),
  MIDI_CONTROL_110                             = Enum (238, _("control-110")),
  MIDI_CONTROL_111                             = Enum (239, _("control-111")),
  MIDI_CONTROL_112                             = Enum (240, _("control-112")),
  MIDI_CONTROL_113                             = Enum (241, _("control-113")),
  MIDI_CONTROL_114                             = Enum (242, _("control-114")),
  MIDI_CONTROL_115                             = Enum (243, _("control-115")),
  MIDI_CONTROL_116                             = Enum (244, _("control-116")),
  MIDI_CONTROL_117                             = Enum (245, _("control-117")),
  MIDI_CONTROL_118                             = Enum (246, _("control-118")),
  MIDI_CONTROL_119                             = Enum (247, _("control-119")),
  MIDI_CONTROL_120                             = Enum (248, _("Control 120 All Sound Off ITrigger")),
  MIDI_CONTROL_121                             = Enum (249, _("Control 121 All Controllers Off ITrigger")),
  MIDI_CONTROL_122                             = Enum (250, _("Control 122 Local Control Switch")),
  MIDI_CONTROL_123                             = Enum (251, _("Control 123 All Notes Off ITrigger")),
  MIDI_CONTROL_124                             = Enum (252, _("Control 124 Omni Mode Off ITrigger")),
  MIDI_CONTROL_125                             = Enum (253, _("Control 125 Omni Mode On ITrigger")),
  MIDI_CONTROL_126                             = Enum (254, _("Control 126 Monophonic Voices Mode")),
  MIDI_CONTROL_127                             = Enum (255, _("Control 127 Polyphonic Mode On ITrigger")),
};
enum MidiChannelEventType {
  MIDI_EVENT_NONE = 0,
  /* channel voice messages */
  MIDI_EVENT_NOTE_OFF,
  MIDI_EVENT_NOTE_ON,
  MIDI_EVENT_KEY_PRESSURE,
  MIDI_EVENT_CONTROL_CHANGE,
  MIDI_EVENT_PROGRAM_CHANGE,
  MIDI_EVENT_CHANNEL_PRESSURE,
  MIDI_EVENT_PITCH_BEND,
  /* system common messages */
  MIDI_EVENT_SYS_EX,
  MIDI_EVENT_SONG_POINTER,
  MIDI_EVENT_SONG_SELECT,
  MIDI_EVENT_TUNE,
  /* system realtime messages */
  MIDI_EVENT_TIMING_CLOCK,
  MIDI_EVENT_SONG_START,
  MIDI_EVENT_SONG_CONTINUE,
  MIDI_EVENT_SONG_STOP,
  MIDI_EVENT_ACTIVE_SENSING,
  MIDI_EVENT_SYSTEM_RESET,
};
record MidiChannelEvent
{
  MidiChannelEventType  event_type;
  Int                   channel         = SfiInt ("Channel", "", 0, 0, 99, 1, ":readwrite"); // FIXME: MAX_MIDI_CHANNEL
  Num                   tick_stamp      = SfiNum ("Time Stamp", "", 0, 0, SFI_MAXNUM, 0, STANDARD);
  /* note (on/off/pressure) */
  Real                  frequency       = Freq ("Frequency", "", KAMMER_FREQ, ":readwrite");
  Real                  velocity        = SfiReal ("Velocity", "", 1, 0, 1.0, 0.1, ":readwrite");
  /* control change */
  Int                   control         = SfiInt ("Control Number", "", 0, 0, 1024, 8, ":readwrite");
  Real                  value           = SfiReal ("Value", "", 0, -1, +1, 0.1, ":readwrite");
  /* program change */
  Int                   program         = SfiInt ("Program", "", 0, 0, 0x7f, 0x10, ":readwrite");
  /* channel pressure */
  Real                  intensity       = SfiReal ("Intensity", "", 0, 0, 1.0, 0.1, ":readwrite");
  /* pitch bend */
  Real                  pitch_bend      = SfiReal ("Pitch Bend", "", 0, -1, +1, 0.1, ":readwrite");
  /* song pointer */
  Int                   song_pointer    = SfiInt ("Song Pointer", "", 0, 0, 0x3fff, 0x80, ":readwrite");
  /* song select */
  Int                   song_number     = SfiInt ("Song Number", "", 0, 0, 0x7f, 0x10, ":readwrite");
};
sequence NoteSeq {
  Int    notes   = Note ("Note", "", KAMMER_NOTE, ":readwrite"); /* FIXME: s/notes/note/ for pspecs, but not the C API */
};
interface Item;
sequence It3mSeq {
  Info   blurb = ("A list of BSE items or derived types.");
  Item   items;
};
record PropertyCandidates {
  Info    blurb      = ("A structure describing tentative property values.");
  SfiString  label;
  SfiString  tooltip;
  It3mSeq items;
  TypeSeq partitions = SfiSeq ("Type Partitions", "List of types which may logically partition the list of items by type discrimination", STANDARD);
};
record NoteSequence
{
  Int     offset = Note ("Note Offset", "Center/base note", KAMMER_NOTE, ":readwrite");
  NoteSeq notes  = SfiSeq ("Notes", "Sequence of notes", ":readwrite");
};
sequence P1xelSeq {
  Int	pixels;
};
/* BSE Part structures */
interface Part;
interface Track;
interface Janitor;

// == BSE Global Config ==
Const DEFAULT_AUTHOR  = "\357\277\271\357\277\272{{bse.idl/default-author}}\357\277\273";
Const DEFAULT_LICENSE = "\357\277\271\357\277\272{{bse.idl/default-license}}\357\277\273";
Const USER_DATA_PATH  = "\357\277\271\357\277\272{{bse.idl/user-data-path}}\357\277\273";
Const DEFAULT_SAMPLE_PATH      = USER_DATA_PATH "samples";
Const DEFAULT_EFFECTS_PATH     = USER_DATA_PATH "effects";
Const DEFAULT_INSTRUMENTS_PATH = USER_DATA_PATH "instruments";
Const DEFAULT_SCRIPTS_PATH     = USER_DATA_PATH "scripts";
Const DEFAULT_PLUGINS_PATH     = USER_DATA_PATH "plugins";

record GConfig {
  group _("Synthesis Settings") {
    Int synth_latency =
      SfiInt (_("Latency [ms]"),
	      _("Processing duration between input and output of a single sample, smaller values increase CPU load"),
	      50, 1, 2000, 5, STANDARD);
    Int synth_mixing_freq =
      SfiInt (_("Synth Mixing Frequency"),
	      _("Synthesis mixing frequency, common values are: 22050, 44100, 48000"),
	      44100, 8000, 192000, 0, STANDARD);
    Int synth_control_freq =
      SfiInt (_("Synth Control Frequency"),
	      _("Frequency at which control values are evaluated, "
		"should be much smaller than Synth Mixing Frequency to reduce CPU load"),
	      1000, 1, 192000, 0, STANDARD);
  };
  group _("MIDI") {
    Bool invert_sustain = SfiBool (_("Invert Sustain Pedal"),
                           _("Invert the state of sustain (damper) pedal so on/off meanings are reversed"),
                           FALSE, STANDARD);
  };
  group _("Default Values") {
    SfiString author_default  = SfiString (_("Default Author"), _("Default value for 'Author' fields"),
					DEFAULT_AUTHOR, STANDARD);
    SfiString license_default = SfiString (_("Default License"), _("Default value for 'License' fields"),
					DEFAULT_LICENSE, STANDARD);
  };
  group _("Search Paths") {
    SfiString sample_path     = SfiString (_("Sample Path"),
					_("Search path of directories, seperated by \";\", used to find audio samples."),
					DEFAULT_SAMPLE_PATH, STANDARD ":searchpath");
    SfiString effect_path     = SfiString (_("Effect Path"),
					_("Search path of directories, seperated by \";\", used to find BSE effect files."),
					DEFAULT_EFFECTS_PATH, STANDARD ":searchpath");
    SfiString instrument_path = SfiString (_("Instrument Path"),
					_("Search path of directories, seperated by \";\", used to find BSE instrument files."),
					DEFAULT_INSTRUMENTS_PATH, STANDARD ":searchpath");
    SfiString script_path     = SfiString (_("Script Path"),
					_("Search path of directories, seperated by \";\", used to find BSE scheme scripts."),
					DEFAULT_SCRIPTS_PATH, STANDARD ":searchpath");
    SfiString plugin_path     = SfiString (_("Plugin Path"),
					_("Search path of directories, seperated by \";\", used to find BSE plugins. This path "
					  "is searched for in addition to the standard BSE plugin location on this system."),
					DEFAULT_PLUGINS_PATH, STANDARD ":searchpath");
    SfiString ladspa_path     = SfiString (_("LADSPA Path"),
					_("Search path of directories, seperated by \";\", used to find LADSPA plugins. This "
					  "path is searched for in addition to the standard LADSPA location on this system. "
					  "LADSPA is the Linux Audio Developer's Simple Plugin API, more informations about "
					  "LADSPA plugins can be found at http://www.ladspa.org/."),
					"", STANDARD ":searchpath");
  };
};

} // Bse
