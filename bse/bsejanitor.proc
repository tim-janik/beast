// Licensed GNU LGPL v2.1 or later: http://www.gnu.org/licenses/lgpl.html
#include <bse/bseplugin.hh>
#include <bse/bseprocedure.hh>
#include <bse/bsejanitor.hh>
#include <bse/bseserver.hh>
#include <string.h>
#include "bsebuiltin_externs.cc"


AUTHORS	= "Tim Janik <timj@gtk.org>";
LICENSE = "GNU Lesser General Public License";


METHOD (BseJanitor, trigger-action) {
  HELP	= "Trigger an installed user action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor  *self = (BseJanitor*) bse_value_get_object (in_values++);
  const gchar *action = sfi_value_get_string (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self) || !action)
    return Bse::Error::PROC_PARAM_INVAL;

  /* action */
  bse_janitor_trigger_action (self, action);

  return Bse::Error::NONE;
}

METHOD (BseJanitor, get-script-name) {
  HELP	= "Retrieve the script name of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT    = sfi_pspec_string ("script_name", "Script Name", NULL,
			     NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, self->script_name);

  return Bse::Error::NONE;
}

METHOD (BseJanitor, get-proc-name) {
  HELP	= "Retrieve the procedure name of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT    = sfi_pspec_string ("proc_name", "Proc Name", NULL,
			     NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_string (out_values++, self->proc_name);

  return Bse::Error::NONE;
}

METHOD (BseJanitor, n-actions) {
  HELP	= "Retrieve number of user actions of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  OUT   = sfi_pspec_int ("n_actions", "N Actions", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::Error::PROC_PARAM_INVAL;

  /* set output parameters */
  sfi_value_set_int (out_values++, g_slist_length (self->actions));

  return Bse::Error::NONE;
}

METHOD (BseJanitor, get-action) {
  HELP	= "Retrieve an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action", "Action", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::Error::PROC_PARAM_INVAL;

  BseJanitorAction *a = (BseJanitorAction*) g_slist_nth_data (self->actions, nth);
  /* set output parameters */
  sfi_value_set_string (out_values++, a ? g_quark_to_string (a->action) : NULL);

  return Bse::Error::NONE;
}

METHOD (BseJanitor, get-action-name) {
  HELP	= "Retrieve the name of an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action-name", "Action Name", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::Error::PROC_PARAM_INVAL;

  BseJanitorAction *a = (BseJanitorAction*) g_slist_nth_data (self->actions, nth);

  /* set output parameters */
  sfi_value_set_string (out_values++, a ? a->name : NULL);

  return Bse::Error::NONE;
}

METHOD (BseJanitor, get-action-blurb) {
  HELP	= "Retrieve the help string of an action of this janitor.";
  IN	= bse_param_spec_object ("janitor", "Janitor", NULL,
				 BSE_TYPE_JANITOR, SFI_PARAM_STANDARD);
  IN	= sfi_pspec_int ("nth_action", "Nth Action", NULL,
			 0, 0, G_MAXINT, 1, SFI_PARAM_STANDARD);
  OUT	= sfi_pspec_string ("action-blurb", "Action Blurb", NULL,
			    NULL, SFI_PARAM_STANDARD);
}
BODY (BseProcedureClass *proc,
      const GValue      *in_values,
      GValue            *out_values)
{
  /* extract parameter values */
  BseJanitor *self = (BseJanitor*) bse_value_get_object (in_values++);
  guint             nth  = sfi_value_get_int (in_values++);

  /* check parameters */
  if (!BSE_IS_JANITOR (self))
    return Bse::Error::PROC_PARAM_INVAL;

  BseJanitorAction *a = (BseJanitorAction*) g_slist_nth_data (self->actions, nth);

  /* set output parameters */
  sfi_value_set_string (out_values++, a ? a->blurb : NULL);
  return Bse::Error::NONE;
}
